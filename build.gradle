plugins {
	id 'java'
	id 'idea'
	id 'com.google.osdetector' version '1.4.0'
}

group 'org.onedrive'
version '0.10.0'

compileJava {
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	options.compilerArgs << "-Xlint:unchecked"
}

repositories {
	jcenter()
}

dependencies {
	compile 'com.fasterxml.jackson.core:jackson-annotations:+'
	compile 'com.fasterxml.jackson.core:jackson-core:+'

	compile 'io.netty:netty-buffer:4.+'
	compile 'io.netty:netty-codec:4.+'
	compile 'io.netty:netty-codec-http:4.+'
	compile 'io.netty:netty-common:4.+'
	compile 'io.netty:netty-handler:4.+'
	compile 'io.netty:netty-resolver:4.+'
	compile 'io.netty:netty-transport:4.+'


	if (osdetector.os == 'linux' || osdetector.os == 'osx' || osdetector.os.endsWith('bsd')) {
		compile "io.netty:netty-transport-native-epoll:4.+:${osdetector.classifier}"
	}


	compile 'org.projectlombok:lombok:+'

	compile 'org.jetbrains:annotations:+'

	testCompile 'com.fasterxml.jackson.core:jackson-databind:+'
	testCompileOnly 'org.apiguardian:apiguardian-api:+'
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.+'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.+'
}


task delombok(dependsOn: compileJava) {
	ext.srcDelomboked = file("${buildDir}/delomboked")
	outputs.dir(ext.srcDelomboked)

	// older version: lombok.delombok.ant.DelombokTask
	// recent version: lombok.delombok.ant.Tasks$Delombok
	ant.taskdef(name: 'delombok', classname: 'lombok.delombok.ant.Tasks$Delombok',
			classpath: configurations.compile.asPath)

	sourceSets.main.java.srcDirs.each {
		inputs.dir(it)
	}

	doLast {
		sourceSets.main.java.srcDirs.each {
			ant.delombok(from: it, to: ext.srcDelomboked, encoding: 'UTF-8', classpath: configurations.compile.asPath)
		}
	}
}

javadoc {
	dependsOn delombok
	options.addBooleanOption('html5').setValue(true)
	source = delombok.srcDelomboked
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}
